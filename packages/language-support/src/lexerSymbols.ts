import Cypher5Lexer from './generated-parser/Cypher5CmdLexer';

export enum CypherTokenType {
  comment = 'comment',
  keyword = 'keyword',
  label = 'label',
  predicateFunction = 'predicateFunction',
  function = 'function',
  procedure = 'procedure',
  variable = 'variable',
  paramDollar = 'paramDollar',
  paramValue = 'paramValue',
  symbolicName = 'symbolicName',
  operator = 'operator',
  stringLiteral = 'stringLiteral',
  numberLiteral = 'numberLiteral',
  booleanLiteral = 'booleanLiteral',
  keywordLiteral = 'keywordLiteral',
  property = 'property',
  namespace = 'namespace',
  bracket = 'bracket',
  separator = 'separator',
  punctuation = 'punctuation',
  none = 'none',
  consoleCommand = 'consoleCommand',
}

export const lexerOperators = [
  Cypher5Lexer.AMPERSAND,
  Cypher5Lexer.BAR,
  Cypher5Lexer.COLON,
  Cypher5Lexer.COLONCOLON,
  Cypher5Lexer.DIVIDE,
  Cypher5Lexer.DOLLAR,
  Cypher5Lexer.DOT,
  Cypher5Lexer.DOTDOT,
  Cypher5Lexer.DOUBLEBAR,
  Cypher5Lexer.EQ,
  Cypher5Lexer.EXCLAMATION_MARK,
  Cypher5Lexer.GE,
  Cypher5Lexer.GT,
  Cypher5Lexer.LE,
  Cypher5Lexer.LT,
  Cypher5Lexer.MINUS,
  Cypher5Lexer.NEQ,
  Cypher5Lexer.INVALID_NEQ,
  Cypher5Lexer.PERCENT,
  Cypher5Lexer.PLUS,
  Cypher5Lexer.PLUSEQUAL,
  Cypher5Lexer.POW,
  Cypher5Lexer.QUESTION,
  Cypher5Lexer.REGEQ,
  Cypher5Lexer.TIMES,
];

export const lexerBrackets = [
  Cypher5Lexer.LBRACKET,
  Cypher5Lexer.LCURLY,
  Cypher5Lexer.LPAREN,
  Cypher5Lexer.RBRACKET,
  Cypher5Lexer.RCURLY,
  Cypher5Lexer.RPAREN,
];
export const lexerPunctuation = [Cypher5Lexer.SEMICOLON];
export const lexerSeparators = [
  Cypher5Lexer.COMMA,
  Cypher5Lexer.ARROW_LINE,
  Cypher5Lexer.ARROW_LEFT_HEAD,
  Cypher5Lexer.ARROW_RIGHT_HEAD,
];
export const lexerNumberLiterals = [
  Cypher5Lexer.DECIMAL_DOUBLE,
  Cypher5Lexer.UNSIGNED_DECIMAL_INTEGER,
  Cypher5Lexer.UNSIGNED_HEX_INTEGER,
  Cypher5Lexer.UNSIGNED_OCTAL_INTEGER,
];

export const lexerStringLiteral = [
  Cypher5Lexer.STRING_LITERAL1,
  Cypher5Lexer.STRING_LITERAL2,
  Cypher5Lexer.FIVE,
  Cypher5Lexer.TWENTYFIVE,
];

export const lexerGarbage = [
  Cypher5Lexer.ErrorChar,
  Cypher5Lexer.EOF,
  Cypher5Lexer.SPACE,
];

export const identifier = [
  Cypher5Lexer.IDENTIFIER,
  Cypher5Lexer.ESCAPED_SYMBOLIC_NAME,
];

export const lexerComment = [
  Cypher5Lexer.MULTI_LINE_COMMENT,
  Cypher5Lexer.SINGLE_LINE_COMMENT,
];

export const lexerKeywords = [
  Cypher5Lexer.ACCESS,
  Cypher5Lexer.ACTIVE,
  Cypher5Lexer.ADMIN,
  Cypher5Lexer.ADMINISTRATOR,
  Cypher5Lexer.ALIAS,
  Cypher5Lexer.ALIASES,
  Cypher5Lexer.ALL,
  Cypher5Lexer.ALL_SHORTEST_PATHS,
  Cypher5Lexer.ALTER,
  Cypher5Lexer.AND,
  Cypher5Lexer.ANY,
  Cypher5Lexer.ARRAY,
  Cypher5Lexer.AS,
  Cypher5Lexer.ASC,
  Cypher5Lexer.ASCENDING,
  Cypher5Lexer.ASSERT,
  Cypher5Lexer.ASSIGN,
  Cypher5Lexer.AT,
  Cypher5Lexer.AUTH,
  Cypher5Lexer.BINDINGS,
  Cypher5Lexer.BOOL,
  Cypher5Lexer.BOOLEAN,
  Cypher5Lexer.BOOSTED,
  Cypher5Lexer.BOTH,
  Cypher5Lexer.BREAK,
  Cypher5Lexer.BRIEF,
  Cypher5Lexer.BTREE,
  Cypher5Lexer.BUILT,
  Cypher5Lexer.BY,
  Cypher5Lexer.CALL,
  Cypher5Lexer.CASCADE,
  Cypher5Lexer.CASE,
  Cypher5Lexer.CIDR,
  Cypher5Lexer.CHANGE,
  Cypher5Lexer.COLLECT,
  Cypher5Lexer.COMMAND,
  Cypher5Lexer.COMMANDS,
  Cypher5Lexer.COMMIT,
  Cypher5Lexer.COMPOSITE,
  Cypher5Lexer.CONSTRAINT,
  Cypher5Lexer.CONSTRAINTS,
  Cypher5Lexer.CONTAINS,
  Cypher5Lexer.CONTINUE,
  Cypher5Lexer.COPY,
  Cypher5Lexer.COUNT,
  Cypher5Lexer.CREATE,
  Cypher5Lexer.CSV,
  Cypher5Lexer.CONCURRENT,
  Cypher5Lexer.CURRENT,
  Cypher5Lexer.CYPHER,
  Cypher5Lexer.DATA,
  Cypher5Lexer.DATABASE,
  Cypher5Lexer.DATABASES,
  Cypher5Lexer.DATE,
  Cypher5Lexer.DATETIME,
  Cypher5Lexer.DBMS,
  Cypher5Lexer.DEALLOCATE,
  Cypher5Lexer.DEFAULT,
  Cypher5Lexer.DEFINED,
  Cypher5Lexer.DELETE,
  Cypher5Lexer.DENY,
  Cypher5Lexer.DESC,
  Cypher5Lexer.DESCENDING,
  Cypher5Lexer.DESTROY,
  Cypher5Lexer.DETACH,
  Cypher5Lexer.DIFFERENT,
  Cypher5Lexer.DISTINCT,
  Cypher5Lexer.DRIVER,
  Cypher5Lexer.DROP,
  Cypher5Lexer.DRYRUN,
  Cypher5Lexer.DUMP,
  Cypher5Lexer.DURATION,
  Cypher5Lexer.EACH,
  Cypher5Lexer.EDGE,
  Cypher5Lexer.ELEMENT,
  Cypher5Lexer.ELEMENTS,
  Cypher5Lexer.ELSE,
  Cypher5Lexer.ENABLE,
  Cypher5Lexer.ENCRYPTED,
  Cypher5Lexer.END,
  Cypher5Lexer.ENDS,
  Cypher5Lexer.ERROR,
  Cypher5Lexer.EXECUTABLE,
  Cypher5Lexer.EXECUTE,
  Cypher5Lexer.EXIST,
  Cypher5Lexer.EXISTENCE,
  Cypher5Lexer.EXISTS,
  Cypher5Lexer.FAIL,
  Cypher5Lexer.FALSE,
  Cypher5Lexer.FIELDTERMINATOR,
  Cypher5Lexer.FINISH,
  Cypher5Lexer.FLOAT,
  Cypher5Lexer.FOR,
  Cypher5Lexer.FOREACH,
  Cypher5Lexer.FROM,
  Cypher5Lexer.FULLTEXT,
  Cypher5Lexer.FUNCTION,
  Cypher5Lexer.FUNCTIONS,
  Cypher5Lexer.GRANT,
  Cypher5Lexer.GRAPH,
  Cypher5Lexer.GRAPHS,
  Cypher5Lexer.GROUP,
  Cypher5Lexer.GROUPS,
  Cypher5Lexer.HEADERS,
  Cypher5Lexer.HOME,
  Cypher5Lexer.ID,
  Cypher5Lexer.IF,
  Cypher5Lexer.IMMUTABLE,
  Cypher5Lexer.IMPERSONATE,
  Cypher5Lexer.IN,
  Cypher5Lexer.INDEX,
  Cypher5Lexer.INDEXES,
  Cypher5Lexer.INF,
  Cypher5Lexer.INFINITY,
  Cypher5Lexer.INSERT,
  Cypher5Lexer.INT,
  Cypher5Lexer.INTEGER,
  Cypher5Lexer.IS,
  Cypher5Lexer.JOIN,
  Cypher5Lexer.KEY,
  Cypher5Lexer.LABEL,
  Cypher5Lexer.LABELS,
  Cypher5Lexer.LEADING,
  Cypher5Lexer.LIMITROWS,
  Cypher5Lexer.LIST,
  Cypher5Lexer.LOAD,
  Cypher5Lexer.LOCAL,
  Cypher5Lexer.LOOKUP,
  Cypher5Lexer.MANAGEMENT,
  Cypher5Lexer.MAP,
  Cypher5Lexer.MATCH,
  Cypher5Lexer.MERGE,
  Cypher5Lexer.NAME,
  Cypher5Lexer.NAMES,
  Cypher5Lexer.NAN,
  Cypher5Lexer.NEW,
  Cypher5Lexer.NFC,
  Cypher5Lexer.NFD,
  Cypher5Lexer.NFKC,
  Cypher5Lexer.NFKD,
  Cypher5Lexer.NODE,
  Cypher5Lexer.NODETACH,
  Cypher5Lexer.NODES,
  Cypher5Lexer.NONE,
  Cypher5Lexer.NORMALIZE,
  Cypher5Lexer.NORMALIZED,
  Cypher5Lexer.NOT,
  Cypher5Lexer.NOTHING,
  Cypher5Lexer.NOWAIT,
  Cypher5Lexer.NULL,
  Cypher5Lexer.OF,
  Cypher5Lexer.OFFSET,
  Cypher5Lexer.ON,
  Cypher5Lexer.ONLY,
  Cypher5Lexer.OPTION,
  Cypher5Lexer.OPTIONAL,
  Cypher5Lexer.OPTIONS,
  Cypher5Lexer.OR,
  Cypher5Lexer.ORDER,
  Cypher5Lexer.OUTPUT,
  Cypher5Lexer.PASSWORD,
  Cypher5Lexer.PASSWORDS,
  Cypher5Lexer.PATH,
  Cypher5Lexer.PATHS,
  Cypher5Lexer.PERIODIC,
  Cypher5Lexer.PLAINTEXT,
  Cypher5Lexer.POINT,
  Cypher5Lexer.POPULATED,
  Cypher5Lexer.PRIMARY,
  Cypher5Lexer.PRIMARIES,
  Cypher5Lexer.PRIVILEGE,
  Cypher5Lexer.PRIVILEGES,
  Cypher5Lexer.PROCEDURE,
  Cypher5Lexer.PROCEDURES,
  Cypher5Lexer.PROPERTIES,
  Cypher5Lexer.PROPERTY,
  Cypher5Lexer.PROVIDER,
  Cypher5Lexer.PROVIDERS,
  Cypher5Lexer.RANGE,
  Cypher5Lexer.READ,
  Cypher5Lexer.REALLOCATE,
  Cypher5Lexer.REDUCE,
  Cypher5Lexer.REL,
  Cypher5Lexer.RELATIONSHIP,
  Cypher5Lexer.RELATIONSHIPS,
  Cypher5Lexer.REMOVE,
  Cypher5Lexer.RENAME,
  Cypher5Lexer.REPEATABLE,
  Cypher5Lexer.REPLACE,
  Cypher5Lexer.REPORT,
  Cypher5Lexer.REQUIRE,
  Cypher5Lexer.REQUIRED,
  Cypher5Lexer.RESTRICT,
  Cypher5Lexer.RETURN,
  Cypher5Lexer.REVOKE,
  Cypher5Lexer.ROLE,
  Cypher5Lexer.ROLES,
  Cypher5Lexer.ROW,
  Cypher5Lexer.ROWS,
  Cypher5Lexer.SCAN,
  Cypher5Lexer.SECONDARY,
  Cypher5Lexer.SECONDARIES,
  Cypher5Lexer.SEC,
  Cypher5Lexer.SECOND,
  Cypher5Lexer.SECONDS,
  Cypher5Lexer.SEEK,
  Cypher5Lexer.SERVER,
  Cypher5Lexer.SERVERS,
  Cypher5Lexer.SET,
  Cypher5Lexer.SETTING,
  Cypher5Lexer.SETTINGS,
  Cypher5Lexer.SHORTEST,
  Cypher5Lexer.SHORTEST_PATH,
  Cypher5Lexer.SHOW,
  Cypher5Lexer.SIGNED,
  Cypher5Lexer.SINGLE,
  Cypher5Lexer.SKIPROWS,
  Cypher5Lexer.START,
  Cypher5Lexer.STARTS,
  Cypher5Lexer.STATUS,
  Cypher5Lexer.STOP,
  Cypher5Lexer.VARCHAR,
  Cypher5Lexer.STRING,
  Cypher5Lexer.SUPPORTED,
  Cypher5Lexer.SUSPENDED,
  Cypher5Lexer.TARGET,
  Cypher5Lexer.TERMINATE,
  Cypher5Lexer.TEXT,
  Cypher5Lexer.THEN,
  Cypher5Lexer.TIME,
  Cypher5Lexer.TIMESTAMP,
  Cypher5Lexer.TIMEZONE,
  Cypher5Lexer.TO,
  Cypher5Lexer.TOPOLOGY,
  Cypher5Lexer.TRAILING,
  Cypher5Lexer.TRANSACTION,
  Cypher5Lexer.TRANSACTIONS,
  Cypher5Lexer.TRAVERSE,
  Cypher5Lexer.TRIM,
  Cypher5Lexer.TRUE,
  Cypher5Lexer.TYPE,
  Cypher5Lexer.TYPED,
  Cypher5Lexer.TYPES,
  Cypher5Lexer.UNION,
  Cypher5Lexer.UNIQUE,
  Cypher5Lexer.UNIQUENESS,
  Cypher5Lexer.UNWIND,
  Cypher5Lexer.URL,
  Cypher5Lexer.USE,
  Cypher5Lexer.USER,
  Cypher5Lexer.USERS,
  Cypher5Lexer.USING,
  Cypher5Lexer.VALUE,
  Cypher5Lexer.VECTOR,
  Cypher5Lexer.VERBOSE,
  Cypher5Lexer.VERTEX,
  Cypher5Lexer.WAIT,
  Cypher5Lexer.WHEN,
  Cypher5Lexer.WHERE,
  Cypher5Lexer.WITH,
  Cypher5Lexer.WITHOUT,
  Cypher5Lexer.WRITE,
  Cypher5Lexer.XOR,
  Cypher5Lexer.YIELD,
  Cypher5Lexer.ZONE,
  Cypher5Lexer.ZONED,
  // Preparser tokens
  Cypher5Lexer.EXPLAIN,
  Cypher5Lexer.PROFILE,
];

export const lexerConsoleCmds = [
  Cypher5Lexer.HISTORY,
  Cypher5Lexer.PARAM,
  Cypher5Lexer.CLEAR,
];

function toTokentypeObject(arr: number[], tokenType: CypherTokenType) {
  return arr.reduce<Record<number, CypherTokenType>>(
    (acc, curr) => ({ ...acc, [curr]: tokenType }),
    {},
  );
}

export const lexerSymbols: Record<number, CypherTokenType> = {
  ...toTokentypeObject(lexerOperators, CypherTokenType.operator),
  ...toTokentypeObject(lexerKeywords, CypherTokenType.keyword),
  ...toTokentypeObject(lexerBrackets, CypherTokenType.bracket),
  ...toTokentypeObject(lexerComment, CypherTokenType.comment),
  ...toTokentypeObject(lexerGarbage, CypherTokenType.none),
  ...toTokentypeObject(lexerNumberLiterals, CypherTokenType.numberLiteral),
  ...toTokentypeObject(lexerPunctuation, CypherTokenType.punctuation),
  ...toTokentypeObject(lexerSeparators, CypherTokenType.separator),
  ...toTokentypeObject(lexerStringLiteral, CypherTokenType.stringLiteral),
  ...toTokentypeObject(identifier, CypherTokenType.variable),
  ...toTokentypeObject(lexerConsoleCmds, CypherTokenType.consoleCommand),
};

export const hasIncorrectSymbolicName: Record<number, string> = {
  [Cypher5Lexer.ALL_SHORTEST_PATHS]: 'allShortestPaths',
  [Cypher5Lexer.SHORTEST_PATH]: 'shortestPath',
  [Cypher5Lexer.LIMITROWS]: 'LIMIT',
  [Cypher5Lexer.SKIPROWS]: 'SKIP',
};

const { literalNames, symbolicNames } = Cypher5Lexer;

const length = Math.max(literalNames.length, symbolicNames.length);

export const tokenNames: string[] = Array.from({ length }).map(
  (_, i) =>
    hasIncorrectSymbolicName[i] ??
    literalNames[i] ??
    symbolicNames[i] ??
    '<INVALID',
);

export const keywordNames = new Set(lexerKeywords.map((i) => tokenNames[i]));
export const operatorSymbols = new Set(
  lexerOperators.map((i) => literalNames[i].replaceAll("'", '')),
);
